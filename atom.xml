<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://bonjouryy.github.io/</id>
    <title>Gridea</title>
    <updated>2021-03-10T14:56:15.650Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://bonjouryy.github.io/"/>
    <link rel="self" href="https://bonjouryy.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://bonjouryy.github.io/images/avatar.png</logo>
    <icon>https://bonjouryy.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[css自定义属性(css变量)]]></title>
        <id>https://bonjouryy.github.io/post/CSS自定义属性(CSS变量)/</id>
        <link href="https://bonjouryy.github.io/post/CSS自定义属性(CSS变量)/">
        </link>
        <updated>2021-03-09T07:20:32.000Z</updated>
        <content type="html"><![CDATA[<p>CSS自定义属性也叫CSS变量，用来在最开始的时候定义一个变量，然后可以在整个文档中都可以复用它。</p>
<p>用法：定义变量 和 使用变量</p>
<h2 id="定义变量">定义变量</h2>
<p>变量名以 &quot;--&quot; 开头<br>
例如</p>
<pre><code class="language-css">element{
  --main-bg-color:red;
}
</code></pre>
<h2 id="使用变量">使用变量</h2>
<p>直接用 var() 来引用变量名</p>
<pre><code class="language-css">element{
  background-color:var(--main-bg-color);
}
</code></pre>
<h2 id="注意点来咯">注意点来咯！！！</h2>
<p>CSS的自定义属性是有作用域的，例如上面的定义变量写在 element 这个选择器中，那么就只能在 element 中使用。所以为了能后在全局使用，我们一般提前在 :root 选择器中定义好。</p>
<pre><code class="language-css">:root{
  --main-bg-color:red;
  --text-color:yellow;
}
</code></pre>
<p>参考资料：https://developer.mozilla.org/zh-CN/docs/Web/CSS/Using_CSS_custom_properties</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[相邻选择器和兄弟选择器的区别]]></title>
        <id>https://bonjouryy.github.io/post/相邻选择器和兄弟选择器的区别/</id>
        <link href="https://bonjouryy.github.io/post/相邻选择器和兄弟选择器的区别/">
        </link>
        <updated>2021-02-22T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<h2 id="相邻选择器">相邻选择器</h2>
<p>基本语法：A + B { }</p>
<p>理解：选中A元素后面的 与A元素同级的 <code>一个</code> B元素</p>
<pre><code class="language-html">&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;相邻选择器/兄弟选择器&lt;/title&gt;
    &lt;meta charset=&quot;UTF-8&quot; /&gt;
    &lt;style&gt;
      div + p {
        color:red; // 2 变红 3 不变红
      }
    &lt;/style&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div&gt;&lt;p&gt;1&lt;/p&gt;&lt;/div&gt;
    &lt;p&gt;2&lt;/p&gt;
    &lt;p&gt;3&lt;/p&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h2 id="兄弟选择器">兄弟选择器</h2>
<p>基本语法：A ~ B { }</p>
<p>理解：选中A元素后面的 与A元素同级的 <code>所有</code> B元素</p>
<pre><code class="language-html">&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;相邻选择器/兄弟选择器&lt;/title&gt;
    &lt;meta charset=&quot;UTF-8&quot; /&gt;
    &lt;style&gt;
      div ~ p {
        color:red; // 2 和 3 都会变红
      }
    &lt;/style&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div&gt;&lt;p&gt;1&lt;/p&gt;&lt;/div&gt;
    &lt;p&gt;2&lt;/p&gt;
    &lt;p&gt;3&lt;/p&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[HTML5新特性-Canvas笔记]]></title>
        <id>https://bonjouryy.github.io/post/HTML5新特性-Canvas笔记/</id>
        <link href="https://bonjouryy.github.io/post/HTML5新特性-Canvas笔记/">
        </link>
        <updated>2021-02-21T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<p>Canvas在HTML5中是画板的意思，如果想要在HTML5中应用Canvas，则加入<code>&lt;canvas&gt;&lt;/canvas&gt;</code>即可</p>
<p>1）利用canvas画矩形</p>
<pre><code class="language-html">&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Canvas画板&lt;/title&gt;
    &lt;meta charset=&quot;UTF-8&quot; /&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;!--引入canvas画板需要设置过id、width、height,有时还需要设置border--&gt;
    &lt;canvas id=&quot;mycanvas&quot; width=&quot;400px&quot; height=&quot;300px&quot;&gt;&lt;/canvas&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<pre><code class="language-js">var c = document.getElementById(&quot;mycanvas&quot;); //首先找到画板元素
var ctx = c.getContext(&quot;2d&quot;); //根据画板元素得到对象，意思是寻找到笔
ctx.fillStyle(&quot;#FF0000&quot;); //设置属性
ctx.fillRect(0,0,200,150); //利用fillRect方法开始作图 四个参数分别是 fillRect(x,y,width,height)
</code></pre>
<p>2）利用canvas画线</p>
<pre><code class="language-js">var c = document.getElementById(&quot;mycanvas&quot;);
var ctx = c.getContext(&quot;2d&quot;);
ctx.moveTo(0,0); //设置开始坐标
ctx.lineTo(200,150); //设置终点坐标
ctx.stroke();
</code></pre>
<p>3）利用canvas画圆</p>
<pre><code class="language-js">var c = document.getElementById(&quot;mycanvas&quot;);
var ctx = c.getContext(&quot;2d&quot;);
ctx.beginPath();
ctx.arc(200,150,80,0,Math.PI); //设置属性 五个参数分别是 圆心的x轴和y轴坐标、半径、开始弧度、终点弧度（弧度是顺时针旋转）
</code></pre>
<p>4）利用canvas绘制文本</p>
<pre><code class="language-js">var c = document.getElementById(&quot;mycanvas&quot;);
var ctx = c.getContext(&quot;2d&quot;);
ctx.font=&quot;30px Arial&quot; //设置字体的大小和样式
ctx.fillText(&quot;Hello World&quot;,200,150) //字体文本，字体坐标
</code></pre>
<p>5）把图像放到canvas画板上</p>
<pre><code class="language-js">var c = document.getElementById(&quot;mycanvas&quot;);
var ctx = c.getContext(&quot;2d&quot;);
var img = document.getElementById(&quot;myimg&quot;); //myimg需要在html中添加
ctx.drawImage(img,10,10); //图像名、图像坐标
</code></pre>
<p>6）在canvas画线性渐变和径向渐变</p>
<p>这一点还没有学到，等学到了再来补充笔记。。。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[HTTP入门笔记]]></title>
        <id>https://bonjouryy.github.io/post/HTTP入门笔记/</id>
        <link href="https://bonjouryy.github.io/post/HTTP入门笔记/">
        </link>
        <updated>2021-02-21T06:20:32.000Z</updated>
        <content type="html"><![CDATA[<h2 id="http协议">HTTP协议</h2>
<p>Q：当我们在浏览器的地址栏输入URL时，背后发生了哪些事情？</p>
<p>A：1）首先浏览器判断用户输入的URL是否是正确的，如果不是，则利用默认搜索引擎进行搜索。<br>
2）如果是正确的，则先经过DNS服务器解析，DNS服务器解析的目的是把域名转换成IP地址。<br>
3）寻找到IP地址后，开始向服务器发送HTTP请求，请求是一报文的形式发送出去的，报文的大小是有限制的，所以一般会把报文分割成很多个小的数据包依次发送。服务器接收到这些请求之后，再进行拼合。服务器根据请求知道客户端需要什么，再给浏览器发送HTTP响应，浏览器收到响应后，把页面渲染出来。</p>
<figure data-type="image" tabindex="1"><img src="https://img-a.udemycdn.com/redactor/raw/2018-12-18_09-06-37-47212942a52fd50fb8075cb301d7c495.png?WuUjUbGR2CJ6iDW_B0J0He1crvbzDUFs8V1ta92MFrc9gPuPJNyzIEIdosG0L5Rs1yJVZli5xag-YLTnGoBsRqLZj3Oj2l-HLUaORZROe4TmvKWIeex8l1FlKj92ebumkFqw9-AHExgj0IRQWpVGN_7szgaql6JG8Bm2p7IVJrkzwAwG" alt="img" loading="lazy"></figure>
<ul>
<li>客服端浏览器主动发起一个HTTP request</li>
<li>服务器接收到HTTP请求后，做出相应的逻辑处理</li>
<li>服务器返回一个HTTP response</li>
<li>浏览器接收到响应后，做出相应的逻辑处理</li>
</ul>
<h2 id="http-request-报文-和-http-response-报文-的组成">Http request 报文 和 Http response 报文 的组成</h2>
<p>一个Htpp request报文包括：<br>
请求方法 methods：GET、POST、PATCH 等<br>
请求地址 URL<br>
请求头 Headers：以键值对的形式存在，描述报文的基本信息<br>
请求体 Body：报文的具体内容</p>
<p>一个Http response报文包括：<br>
状态码 Status code：200 404 等<br>
响应头 Headers<br>
响应体 Body</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[px、em、rem、vw、百分比的区别，你真的知道吗？]]></title>
        <id>https://bonjouryy.github.io/post/pxemremvwbai-fen-bi-de-qu-bie-ni-zhen-de-zhi-dao-ma/</id>
        <link href="https://bonjouryy.github.io/post/pxemremvwbai-fen-bi-de-qu-bie-ni-zhen-de-zhi-dao-ma/">
        </link>
        <updated>2021-01-08T07:20:32.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>px</p>
</blockquote>
<p>px是固定单位，其他几种都是相对单位。当我们把电脑屏幕的分辨率调为1440*900时，css里面设置的1px实际的物理尺寸就是屏幕宽度的1/1440。也就是说，px的实际大小由电脑的屏幕分辨率决定。</p>
<blockquote>
<p>em</p>
</blockquote>
<p>默认字体大小的倍数，这里的默认字体大小指的是继承自父元素的字体大小。比如给p元素设置font-size:2em，那么我们先去找p元素的父元素的字体是多少，如果是16px，那么p元素就是32px。如果是20px，那么p元素就是40px。一级一级向上找，浏览器默认的字体大小是16px。当给元素设置width: 2em，这里的默认字体大小是该元素自身的实际字体大小。就不是父元素的字体大小了。</p>
<blockquote>
<p>rem</p>
</blockquote>
<p>根元素(html 节点)字体大小的倍数。比如给p元素设置font-size:2rem，那么我们直接看html节点设置的font-size的大小，从而算出p元素的字体大小。</p>
<blockquote>
<p>vw</p>
</blockquote>
<p>1vw 代表浏览器视口宽度的1%。</p>
<blockquote>
<p>1%</p>
</blockquote>
<p>font-size: 200% 和font-size: 2em 一样，表示字体大小是默认（继承自父亲）字体大小的2倍。<br>
line-height: 200% 表示行高是自己字体大小的2倍。<br>
width: 100%在标准盒模型下表示自己content的宽度等于父亲content的宽度，在IE盒模型下，表示自己content+padding+border的宽度等于父亲content的宽度。</p>
<br/>
<p>题目: 下面代码中，body、article、p的实际字体大小分别是多少？</p>
<ul>
<li>A、body是32px， article是16px，p是32px</li>
<li>B、body是32px， article是32px，p是64px</li>
<li>C、body是16px， article是16px，p是32px</li>
<li>D、body是32px， article是32px，p是32px</li>
</ul>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;em 演示&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;article&gt;
      &lt;p&gt;hello 饥人谷&lt;/p&gt;
    &lt;/article&gt;
    
    &lt;style&gt;
      body{
        font-size: 2em;
      }
      p {
        font-size: 2em;
      }
&lt;/style&gt;
  &lt;/body&gt;
&lt;/html&gt;

// 答案：B。html默认是16px，body是2em，是默认的2倍32px， article是32px，p是article的2倍64px。
</code></pre>
<br/>
<p>题目: 以下代码中，p的width的实际值是多少？(单选)</p>
<ul>
<li>A、32px</li>
<li>B、64px</li>
<li>C、128px</li>
<li>D、256px</li>
</ul>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;em 演示&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;article&gt;
      &lt;p&gt;hello 饥人谷&lt;/p&gt;
    &lt;/article&gt;
    
    &lt;style&gt;
      body{
        font-size: 2em;
      }
      p {
        font-size: 2em;
        width: 2em;
      }
&lt;/style&gt;
  &lt;/body&gt;
&lt;/html&gt;

// 答案：C。p的宽度是默认字号的2倍， 字号是64px。
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSS选择器优先级是怎样计算的？]]></title>
        <id>https://bonjouryy.github.io/post/css-xuan-ze-qi-you-xian-ji-shi-zen-yang-ji-suan-de/</id>
        <link href="https://bonjouryy.github.io/post/css-xuan-ze-qi-you-xian-ji-shi-zen-yang-ji-suan-de/">
        </link>
        <updated>2021-01-08T03:45:00.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-口诀记忆">1、口诀记忆</h2>
<p>选中且设置！important的 &gt; 权重高的 &gt; 权重相同位置靠后的 &gt; 来自继承的</p>
<p>行间样式 &gt; id选择器 &gt; 类选择器 = 伪类选择器 = 属性选择器 &gt; 标签选择器 = 伪元素选择器<br>
1000              100                  10                   10                     10                       1                         1</p>
<h2 id="2-权重计算">2、权重计算</h2>
<p>千位：有行间属性该位得一分</p>
<p>百位：有ID选择器该位得一分</p>
<p>十位：有类选择器、属性选择器、伪类该位分别得一分</p>
<p>个位：有标签选择器、伪元素选择器该位分别得一分</p>
<h2 id="3-举例">3、举例</h2>
<p>#header p.content.active 得分为 0121</p>
<p>.header p.active::before 得分为 0022</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSS3]]></title>
        <id>https://bonjouryy.github.io/post/css3/</id>
        <link href="https://bonjouryy.github.io/post/css3/">
        </link>
        <updated>2021-01-01T07:20:32.000Z</updated>
        <content type="html"><![CDATA[<h3 id="一-前缀">一、前缀</h3>
<table>
<thead>
<tr>
<th style="text-align:center">前缀</th>
<th style="text-align:center">浏览器</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-webkit</td>
<td style="text-align:center">chrome 和 safari</td>
</tr>
<tr>
<td style="text-align:center">-moz</td>
<td style="text-align:center">firefox</td>
</tr>
<tr>
<td style="text-align:center">-ms</td>
<td style="text-align:center">IE</td>
</tr>
<tr>
<td style="text-align:center">-o</td>
<td style="text-align:center">opera</td>
</tr>
</tbody>
</table>
<p>兼容性查询网站：http://css.doyoe.com/ https://caniuse.com/</p>
<p>预处理器(pre-processor)：sass / less cssNext</p>
<p>后处理器(post-processor)：autoprefixer</p>
<h3 id="二-css-3-选择器">二、css 3 选择器</h3>
<h4 id="relationship-selectors-关系系选择器">Relationship Selectors 关系系选择器</h4>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot;&gt;
  &lt;title&gt;JS Bin&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div&gt;&lt;/div&gt;
  &lt;p&gt;1&lt;/p&gt;
  &lt;p&gt;2&lt;/p&gt;
  &lt;p&gt;3&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>E + F 下一个满足条件的兄弟元素节点</p>
<pre><code class="language-css">div + p {
  background-color:red;
}
</code></pre>
<p>E ~ F 下面所有满足条件的兄弟元素节点</p>
<pre><code class="language-css">div + p {
  background-color:red;
}
</code></pre>
<h4 id="attribute-selectors-属性元素选择器">Attribute Selectors 属性元素选择器</h4>
<p>E[attr~='val'] 选中带有attr属性，并且属性值是以 val 独立存在的元素。</p>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot;&gt;
  &lt;title&gt;JS Bin&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
 &lt;div class='a'&gt;1&lt;/div&gt;
 &lt;div class='aa abc'&gt;2&lt;/div&gt;
 &lt;div class='a abc'&gt;3&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<pre><code class="language-css">div[class~='a']{
  background-color:red;
}
</code></pre>
<figure data-type="image" tabindex="1"><img src="C:%5CUsers%5Cfanqinyang%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210130194959966.png" alt="image-20210130194959966" loading="lazy"></figure>
<p>E[attr | ='val'] 选中带有attr属性，并且属性值以 val 开头，或者 val- 开头的元素。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MDN笔记]]></title>
        <id>https://bonjouryy.github.io/post/mdn-bi-ji/</id>
        <link href="https://bonjouryy.github.io/post/mdn-bi-ji/">
        </link>
        <updated>2020-12-26T03:59:26.000Z</updated>
        <content type="html"><![CDATA[<p>文件名和文件夹名字用小写，单词之间的分割使用中划线，而不是下划线。<br>
<img src="https://bonjouryy.github.io//post-images/1608955657477.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Git基本操作指令]]></title>
        <id>https://bonjouryy.github.io/post/git/</id>
        <link href="https://bonjouryy.github.io/post/git/">
        </link>
        <updated>2020-12-04T15:42:21.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>git init</p>
</blockquote>
<p>首先，如果想要用git，需要先把项目变成git仓库。执行git init即可</p>
<blockquote>
<p>git init test2</p>
</blockquote>
<p>如果git init 后面加文件夹名，那么它会新建一个文件夹，并且把这个文件夹设置为git仓库。</p>
<blockquote>
<p>ls -la</p>
</blockquote>
<p>查看目录下的所有文件(包括隐藏文件)</p>
<blockquote>
<p>ctrl + l</p>
</blockquote>
<p>清屏</p>
<blockquote>
<p>git clone 地址</p>
</blockquote>
<p>从网上克隆仓库</p>
<blockquote>
<p>git status</p>
</blockquote>
<p>查看仓库状态</p>
<blockquote>
<p>git add .</p>
</blockquote>
<p>将所有修改添加至暂存区</p>
<blockquote>
<p>git commit -m &quot;描述&quot;</p>
</blockquote>
<p>提交版本</p>
<blockquote>
<p>git log</p>
</blockquote>
<p>查看所有版本记录(查看总共记录了几次快照)</p>
<blockquote>
<p>git log -p</p>
</blockquote>
<p>查看的详细的版本记录</p>
<blockquote>
<p>git log --oneline</p>
</blockquote>
<p>以一行展示的形式查看版本记录</p>
<blockquote>
<p>git log --all</p>
</blockquote>
<p>查看所有版本记录</p>
<blockquote>
<p>git log --oneline --all --graph</p>
</blockquote>
<p>以图形化的形式一行展示所有的log记录</p>
<blockquote>
<p>git checkout xxx</p>
</blockquote>
<p>回退到指定的历史节点（回退到指定的快照，吃后悔药，xxx代表节点的身份证）</p>
<blockquote>
<p>git tag -a 标签名 -m '描述'</p>
</blockquote>
<p>附注标签（tag一般发布版本的时候使用）</p>
<blockquote>
<p>git tag</p>
</blockquote>
<p>查看标签</p>
<blockquote>
<p>git show 标签名</p>
</blockquote>
<p>查看某个标签的详细信息</p>
<blockquote>
<p>git checkout 标签名</p>
</blockquote>
<p>回溯至标签所在的提交</p>
<blockquote>
<p>git branch 分支名</p>
</blockquote>
<p>创建分支</p>
<blockquote>
<p>git checkout 分支名</p>
</blockquote>
<p>切换分支</p>
<blockquote>
<p>git checkout -b 分支名</p>
</blockquote>
<p>创建并切换至分支</p>
<blockquote>
<p>git merge 要合并的分支名</p>
</blockquote>
<p>合并分支</p>
<blockquote>
<p>git remote add 远程仓库 远程地址</p>
</blockquote>
<p>添加远程仓库</p>
<blockquote>
<p>git remote -v</p>
</blockquote>
<p>列出所有远程仓库的详细信息</p>
<blockquote>
<p>git push -u 远程名 分支名</p>
</blockquote>
<p>上传代码</p>
<blockquote>
<p>git clone 仓库地址</p>
</blockquote>
<p>克隆(拷贝)仓库</p>
]]></content>
    </entry>
</feed>